""" Algorithm problem
    1 - Stored in the database is a string generated from the randomly generated product number after MD5 encoding
    2 - The content contained in the generated QR code is the string generated by the RSA algorithm
    3 - Need to be heavy when generating new order numbers (actually an exception handler is enough)
"""
from base64 import b64encode, b64decode

from django.test import TestCase
# RSA
import rsa
import hashlib
import random
from py_code.settings import PRIVATE_KEY,PUBLIC_KEY

# Create your tests here.
# RSA - ADD
def RSA_EncryptStr(str):
    # GET public key and prime key
    # Every time to product this key
    # (pubkey, privkey) = rsa.newkeys(512)
    #print(pubkey,privkey)
    content = str.encode('utf-8')
    crypto = rsa.encrypt(content, PUBLIC_KEY)
    return (crypto, PRIVATE_KEY)
# RSA - DEC
def RSA_DeccryptStr(str, pk):
    content = rsa.decrypt(str, pk)
    con = content.decode('utf-8')
    return con
# BASE64 ADD
innerstr = 'SP112548965431246'
print(innerstr)
m = hashlib.md5()
m.update(bytes(innerstr,encoding='utf8'))
inputstr = m.hexdigest()
print(inputstr)
(a, b) = RSA_EncryptStr(inputstr)
print(b64encode(a).decode('utf-8'))
a=b64encode(a).decode('utf-8')
a=b64decode(a)
content = RSA_DeccryptStr(a, b)
print(content)

# GET GOOD_NO
def GET_GOOD_NO():
    a = random.randint(65,90) # Get Up letter ASCII
    b = random.randint(65,90)
    c1 = chr(a)
    c2 = chr(b)
    li = [i for i in range(10000,99999)]
    a1 = random.sample(li, 1)
    a2 = random.sample(li, 1)
    a3 = random.sample(li, 1)
    return ""+str(c1)+str(c2)+str(a1[0])+str(a2[0])+str(a3[0])
print(GET_GOOD_NO())


